#!/usr/bin/env bash

command_exists() {
  type "$1" &> /dev/null ;
}

is_osx() {
  [[ `uname -s` == "Darwin" ]]
}

install_brew_if_on_osx() {
	if is_osx; then
		if ! command_exists brew; then
    		/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
		fi
	fi
}

install_git_and_python() {
	if command_exists brew; then
		brew install git
		brew install python
	elif command_exists apt; then
		sudo add-apt-repository $repository -y git-core/ppa
		sudo apt-get install -y git
		sudo apt-get install -y python
	fi
}

install_docopts() {
  if ! command_exists pip 
    then
    curl https://bootstrap.pypa.io/get-pip.py | sudo python
  fi
  sudo pip install docopts
}

clone_repo() {
	git clone https://github.com/denisidoro/dotfiles.git "$DOTFILES"
}

pushd . > /dev/null

export DOTFILES="$HOME/.dotfiles"
export INSTALL_COMMAND="$DOTFILES/scripts/install"

echo -e "\e[36mdenisidoro's dotfiles\e[0m\n"

if [ -f "$INSTALL_COMMAND" ]; then :
elif [ -f "$DOTFILES" ]; then
	echo "Backing up existing .dotfiles folder and cloning new .dotfiles..."
	mv "$DOTFILES" "$DOTFILES_0"
	clone_repo
else 
	echo "No .dotfiles folder found. Installing dependencies and cloning .dotfiles..."

	# Prompt confirmation
	echo "This script is untested. Use it at your own risk!"
	read -r -p "Do you want to continue? [Y/n] " response
	response=${response,,} 
	if [[ $response =~ ^(yes|y| ) ]] || [ -z $response ]; then
	  echo "Proceeding with installation..."
	else
	  exit
	fi

	install_brew_if_on_osx
	install_git_and_python
	install_docopts
	clone_repo
fi

# invoke dotfiles symlinking
echo "Updating dotfiles..."
cd "$DOTFILES/scripts"
bash "$INSTALL_COMMAND" "dotfiles"

# cleanup
popd > /dev/null
